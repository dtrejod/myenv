" ---------
" - LOCAL -
" ---------

" Load any local overrides
if !empty(glob("~/.local/vim/"))
  source ~/.local/vim/*
endif

" ------------
" - vim-plug -
" ------------
"
" Install vim-plug plugins
call plug#begin('~/.vim/plugged')
" Vim-go/govim (sytanx)
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
" Plug 'govim/govim'
" Vim-Puppet (syntax)
Plug 'rodjek/vim-puppet'
" Vim-sluth (autoindent)
Plug 'tpope/vim-sleuth'
" vim-terraform (syntax)
Plug 'hashivim/vim-terraform'
" vim-airline (UX)
Plug 'vim-airline/vim-airline'
" vim-airline-themes (UX)
Plug 'vim-airline/vim-airline-themes'
" vim-fugitive (git)
Plug 'tpope/vim-fugitive'
" vim-rhubarb (git-browse)
Plug 'tpope/vim-rhubarb'
" tmuxline.vim (UX)
Plug 'edkolev/tmuxline.vim'
" ale (async linter)
Plug 'dense-analysis/ale'
call plug#end()

" ---------------
" - Default VIM -
" ---------------
"
" reset filetype
filetype off
filetype plugin indent on

" Disable mouse
set mouse=c

" enable vim specific features
set nocompatible

" Turn on the sign column so you can see error marks on lines where there are
" quickfix errors.errors
set signcolumn=number

" Set syntax always on
syntax on

" Show column/line number stats
set ruler

" Set Tab equal to four spaces
if empty(glob("~/.vim/plugged/vim-sleuth"))
  " Default to 4 spaces
  set expandtab
  set tabstop=4
  set shiftwidth=4
endif
set smartindent
set autoindent

" Set backspace to work like normal
set backspace=2

" Shift-Tab unindents
imap <S-Tab> <C-o><<

" Show Tabs
set list
set listchars=tab:>-

" Show line numbers
set number

" Show vertical line at and set width to 120 chars
set colorcolumn=120
set textwidth=120
set formatoptions-=t

set background=dark

" Tab completion on tab
set wildmode=longest,list,full
set wildmenu

" Highlight unwanted space
:highlight ExtraWhitespace ctermbg=red guibg=red
:match ExtraWhitespace /\s\+$/

" Remember last position on opened files
if has("autocmd")
      au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" ----------------------
" - vim-airline-themes -
" ----------------------
"
let g:airline_theme='minimalist'

" ------------------------
" - edkolev/tmuxline.vim -
" ------------------------
"
let g:tmuxline_powerline_separators = 0
let g:tmuxline_preset = {
        \ 'a': '#S',
        \ 'b': '#F',
        \ 'c': '#W',
        \ 'win': ['#I', '#W'],
        \ 'cwin': ['#I', '#W'],
        \ 'x': '%a',
        \ 'y': ['%b %d', '%R', '#(TZ="UTC" date +%%H:%%M) utc'],
        \ 'z': '#H'}

" ----------
" - python -
" ----------
"
" Trim unused whitespace
let g:pymode_trim_whitespaces = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Disable code check on every save
let g:pymode_lint_on_write = 1

" On the fly code check
let g:pymode_lint_on_fly = 0

" Disable code folding
let g:pymode_folding = 0

" Disable pyrope
let g:pymode_rope = 0

" Disable code scratch
set completeopt-=preview

" ----------
" - vim-go -
" ----------
"
" autocomplete using gopls
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'

" autoformatting
let g:go_fmt_command = "goimports"
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"

" Linter
let g:go_metalinter_autosave_enabled=['golint', 'govet']

" set tmpl files as go syntax
au BufNewFile,BufRead,BufReadPost *.tmpl set syntax=go

" colors
let g:go_highlight_structs = 1
let g:go_highlight_methods = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_types = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_generate_tags = 1

" ----------------------
" - dense-analysis/ale -
" ----------------------
"
let g:airline#extensions#ale#enabled = 1

" ----------
" - macros -
" ----------
"
" Moving back and forth between lines of same or lower indentation.
nnoremap <silent> [l :call NextIndent(0, 0, 0, 1)<CR>
nnoremap <silent> ]l :call NextIndent(0, 1, 0, 1)<CR>
nnoremap <silent> [L :call NextIndent(0, 0, 1, 1)<CR>
nnoremap <silent> ]L :call NextIndent(0, 1, 1, 1)<CR>
vnoremap <silent> [l <Esc>:call NextIndent(0, 0, 0, 1)<CR>m'gv''
vnoremap <silent> ]l <Esc>:call NextIndent(0, 1, 0, 1)<CR>m'gv''
vnoremap <silent> [L <Esc>:call NextIndent(0, 0, 1, 1)<CR>m'gv''
vnoremap <silent> ]L <Esc>:call NextIndent(0, 1, 1, 1)<CR>m'gv''
onoremap <silent> [l :call NextIndent(0, 0, 0, 1)<CR>
onoremap <silent> ]l :call NextIndent(0, 1, 0, 1)<CR>
onoremap <silent> [L :call NextIndent(1, 0, 1, 1)<CR>
onoremap <silent> ]L :call NextIndent(1, 1, 1, 1)<CR>

" -------------
" - FUNCTIONS -
" -------------

" Jump to the next or previous line that has the same level or a lower
" level of indentation than the current line.
"
" exclusive (bool): true: Motion is exclusive
" false: Motion is inclusive
" fwd (bool): true: Go to next line
" false: Go to previous line
" lowerlevel (bool): true: Go to line with lower indentation level
" false: Go to line with the same indentation level
" skipblanks (bool): true: Skip blank lines
" false: Don't skip blank lines
function! NextIndent(exclusive, fwd, lowerlevel, skipblanks)
  let line = line('.')
  let column = col('.')
  let lastline = line('$')
  let indent = indent(line)
  let stepvalue = a:fwd ? 1 : -1
  while (line > 0 && line <= lastline)
    let line = line + stepvalue
    if ( ! a:lowerlevel && indent(line) == indent ||
          \ a:lowerlevel && indent(line) < indent)
      if (! a:skipblanks || strlen(getline(line)) > 0)
        if (a:exclusive)
          let line = line - stepvalue
        endif
        exe line
        exe "normal " column . "|"
        return
      endif
    endif
  endwhile
endfunction

